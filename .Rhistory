DT <- data.table::fread( "./data/day01.txt" )
data.table::CJ( DT$value, DT$value )[, sum := V1 + V2][ sum == 2020, ]
View(DT)
data.table::CJ( DT$V1, DT$V1 )[, sum := V1 + V2][ sum == 2020, ]
library( data.table )
DT <- data.table::fread( "./data/day01.txt" )
data.table::CJ( DT$V1, DT$V1 )[, sum := V1 + V2][ sum == 2020, ]
1999 * 21
DT <- data.table::fread( "./data/day02_input.txt" )
DT
?fraed
?fread
DT <- data.table::fread( "./data/day02_input.txt", header = FALSE, sep = "[-: ]" )
DT <- data.table::fread( "./data/day02_input.txt", header = FALSE, sep = " " )
DT
tstrsplit( DT$V1, "-" )
as.numeric( tstrsplit( DT$V1, "-" ) )
lapply( tstrsplit( DT$V1, "-" ), as.numeric() )
lapply( tstrsplit( DT$V1, "-" ), as.numeric )
#set min and max repeats
DT[, c("min", "max") := lapply( tstrsplit( DT$V1, "-" ), as.numeric ) ]
DT
DT[, chacracter := gsub( ":", "", V2 ) ]
DT[, password := V3 ]
library( data.table )
#read source
DT <- data.table::fread( "./data/day02_input.txt", header = FALSE, sep = " " )
#columns for regex
DT[, c("min", "max") := lapply( tstrsplit( DT$V1, "-" ), as.numeric ) ]
DT[, character := gsub( ":", "", V2 ) ]
DT[, password := V3 ]
DT
grepl(" .*b.*{1,14}", "bbbbbbbbbbbbbbbbbbb" )
grepl(" .*b.*{1,3}", "bbbbbbbbbbbbbbbbbbb" )
grepl(".*b.*{1,3}", "bbbbbbbbbbbbbbbbbbb" )
grepl(".*b.*{1,14}", "bbbbbbbbbbbbbbbbbbb" )
#create regexes
DT[, regex := paste0( ".*", character, ".*{", min, ",", max, "}" )]
DT
DT[, correct := grepl( regex, password ) ]
DT[, correct := grepl( regex, password ), by = .EACHI ]
DT[, correct := Map( grepl, regex, password ) ]
DT
sum(DT$correct)
View(DT)
sum(DT$correct, na.rm = TRUE)
str(DT)
DT[, correct := as.list(Map( grepl, regex, password ) ) ]
sum(DT$correct, na.rm = TRUE)
DT[, correct := unlist(Map( grepl, regex, password ) ) ]
DT$correct
sum(DT$correct)
View(DT)
DT[, count := stringr::str_count( password, character )]
View(DT)
#create regexes
DT[, correct := stringr::str_count( password, character ) %bewteen% c(min, max)]
#create regexes
DT[, correct := stringr::str_count( password, character ) %between% c(min, max)]
#create regexes
DT[, count := stringr::str_count( password, character )]
#answer
nrow( DT[ count >= min & count >= max, ] )
library( data.table )
#read source
DT <- data.table::fread( "./data/day02_input.txt", header = FALSE, sep = " " )
#columns for regex
DT[, c("min", "max") := lapply( tstrsplit( DT$V1, "-" ), as.numeric ) ]
DT[, character := gsub( ":", "", V2 ) ]
DT[, password := V3 ]
#create regexes
DT[, count := stringr::str_count( password, character )]
DT[, correct := count >= min & count >= max ]
View(DT)
library( data.table )
#read source
DT <- data.table::fread( "./data/day02_input.txt", header = FALSE, sep = " " )
#columns for regex
DT[, c("min", "max") := lapply( tstrsplit( DT$V1, "-" ), as.numeric ) ]
DT[, character := gsub( ":", "", V2 ) ]
DT[, password := V3 ]
#create regexes
DT[, count := stringr::str_count( password, character )]
DT[, correct := count >= min & count <= max ]
#answer
nrow( DT[ count >= min & count <= max, ] )
DT[, correct := count >= min & count <= max ]
#answer
sum(DT$correct)
strsplit("BBBBB", "")
tstrsplit("BBBBB", "")
###########################
# PART 2
###########################
DT <- data.table::fread( "./data/day02_input.txt", header = FALSE, sep = " " )
View(DT)
#columns
DT[, c("first", "second") := lapply( tstrsplit( DT$V1, "-" ), as.numeric ) ]
DT[, character := gsub( ":", "", V2 ) ]
DT[, password := V3 ]
DT
grepl( "^b", "bbbbbbbbbbbbbbbbbbb")
grepl( "^.{13}b", "bbbbbbbbbbbbbbbbbbb")
grepl( "^.{2}v", "vvpvvvmvvvvvvvv")
grepl( "^.{2}p", "vvpvvvmvvvvvvvv")
grepl( "^b", "bbbbbbbbbbbbbbbbbbb")
grepl( "^.{0}b", "bbbbbbbbbbbbbbbbbbb")
#regexes
DT[, regex1 := paste0( "^.", first - 1, first ) ]
DT
#regexes
DT[, regex1 := paste0( "^.{", first - 1, "}", first ) ]
DT
#regexes
DT[, regex1 := paste0( "^.{", first - 1, "}", character ) ]
DT[, regex2 := paste0( "^.{", second - 1, "}", character ) ]
DT
#perform regex by row
DT[, check1 := Map( grepl, regex1, password )]
View(DT)
DT[, check2 := Map( grepl, regex2, password )]
DT
#answer
nrow( DT[ check1 + chack2 == 1, ] )
#answer
nrow( DT[ check1 + check2 == 1, ] )
#answer
nrow( DT[ check1 || check2 , ] )
#perform regex by row
DT[, check1 := unlist( Map( grepl, regex1, password ) ) ]
DT[, check2 := unlist( Map( grepl, regex2, password ) ) ]
str(DT
)
#answer
nrow( DT[ check1 || check2 , ] )
#answer
nrow( DT[ check1 + check2 == 2, ] )
#answer
nrow( DT[ check1 + check2 == 1, ] )
DT <- fread( "./data/day03_input.txt" )
DT
DT <- fread( "./data/day03_input.txt", header = FALSE )
DTDT
DT
DT[ long := unlist( Map( rep, V1, 100 ) ]
DT[ long := unlist( Map( rep, DT$V1, 100 ) ]
DT[, long := unlist( Map( rep, V1, 100 ) ]
DT[, long := unlist( Map( rep, V1, 100 ) ) ]
?rep
Map( rep, DTV1, 2 )
Map( rep, DT$V1, 2 )
paste0( Map( rep, DT$V1, 2 ), collapse = "" )
paste0( Map( rep, DT$V1, 2 ) )
rep( DT$V1, 2)
strrep( DT$V1, 2)
DT[, long := strrep( V1, 100 ) ]
DT
View(DT)
#get horizontal sn vertical position
DT[ vpos := .I ]
DT <- fread( "./data/day03_input.txt", header = FALSE )
#repeat string 100 times
DT[, long := strrep( V1, 100 ) ]
#get horizontal sn vertical position
DT[, rowpos := .I ]
DT[, colpos := 1 + (vpos - 1) * 3 ]
DT[, colpos := 1 + (rowpos - 1) * 3 ]
DT
#build regex
DT[, regex := paste0( "^.{", colpos - 1, "}#" ) ]
View(DT)
#get if tree
DT[, tree := unlist( Map( grepl, regex, long ) ) ]
#get if tree
DT[, tree := unlist( Map( grepl, regex, long, perl = TRUE ) ) ]
View(DT)
#answer
sum(DT$tree)
###################
# PART 1
###################
DT <- fread( "./data/day03_input.txt", header = FALSE )
###################
# PART 2
###################
DT <- fread( "./data/day03_input.txt", header = FALSE )
#repeat string 100 times
DT[, long := strrep( V1, 100 ) ]
lapply( c(1,3,5,7), function(i) {
temp <- copy(DT)
temp[, rowpos := .I ]
temp[, colpos := 1 + (rowpos - 1) * i ]
#build regex
temp[, regex := paste0( "^.{", colpos - 1, "}#" ) ]
#get if tree
temp[, tree := unlist( Map( grepl, regex, long, perl = TRUE ) ) ]
#answer
sum(temp$tree)
})
seq( 1, nrow(DT), 3) )
seq( 1, nrow(DT), 3 )
seq( 1, nrow(DT), 2 )
lapply( c(1,3,5,7), function(i) {
temp <- copy(DT)
temp[, rowpos := .I ]
temp[, colpos := 1 + (rowpos - 1) * i ]
#build regex
temp[, regex := paste0( "^.{", colpos - 1, "}#" ) ]
#get if tree
temp[, tree := unlist( Map( grepl, regex, long, perl = TRUE ) ) ]
#answer
sum(temp$tree)
})
x = 3; y = 1
temp <- copy(DT)
View(temp)
temp[ temp[seq(1, nrow(temp), y), ] ]
temp <- temp[ seq(1, nrow(temp), y), ]
temp[, rowpos := .I ]
temp[, colpos := 1 + (rowpos - 1) * x ]
#build regex
temp[, regex := paste0( "^.{", colpos - 1, "}#" ) ]
#get if tree
temp[, tree := unlist( Map( grepl, regex, long, perl = TRUE ) ) ]
#answer
sum(temp$tree)
mapply( function(x, y) {
x = 3; y = 1
temp <- copy(DT)
temp <- temp[ seq(1, nrow(temp), y), ]
temp[, rowpos := .I ]
temp[, colpos := 1 + (rowpos - 1) * x ]
#build regex
temp[, regex := paste0( "^.{", colpos - 1, "}#" ) ]
#get if tree
temp[, tree := unlist( Map( grepl, regex, long, perl = TRUE ) ) ]
#answer
sum(temp$tree)
}, c(1,3,5,7,1), c(1,1,1,1,2) )
mapply( function(x, y) {
temp <- copy(DT)
temp <- temp[ seq(1, nrow(temp), y), ]
temp[, rowpos := .I ]
temp[, colpos := 1 + (rowpos - 1) * x ]
#build regex
temp[, regex := paste0( "^.{", colpos - 1, "}#" ) ]
#get if tree
temp[, tree := unlist( Map( grepl, regex, long, perl = TRUE ) ) ]
#answer
sum(temp$tree)
}, c(1,3,5,7,1), c(1,1,1,1,2) )
#function
ans <- mapply( function(x, y) {
temp <- copy(DT)
temp <- temp[ seq(1, nrow(temp), y), ]
temp[, rowpos := .I ]
temp[, colpos := 1 + (rowpos - 1) * x ]
#build regex
temp[, regex := paste0( "^.{", colpos - 1, "}#" ) ]
#get if tree
temp[, tree := unlist( Map( grepl, regex, long, perl = TRUE ) ) ]
#answer
sum(temp$tree)
}, c(1,3,5,7,1), c(1,1,1,1,2) )
#[1]  60 286  76  62  45
prod(ans)
